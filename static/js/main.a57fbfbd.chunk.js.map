{"version":3,"sources":["components/Posts.js","components/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["Posts","posts","loading","className","map","post","title","id","Pagination","postsPerPage","totalPosts","handlePagination","pageNumber","i","Math","ceil","push","number","onClick","href","App","useState","setPosts","setLoading","currentPage","setCurrentPage","useEffect","a","axios","get","res","data","fetchPosts","indexOfLastPosts","indexOfFirstPost","currentPosts","slice","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAmBeA,EAjBD,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAEb,OAFkC,EAAdC,QAGT,8CAIP,oBAAIC,UAAU,kBAAd,SAEQF,EAAMG,KAAI,SAAAC,GAAI,OACV,oBAAkBF,UAAU,kBAA5B,SAA+CE,EAAKC,OAA3CD,EAAKE,UCanBC,EAvBI,SAAC,GAEhB,IAFoE,IAAlDC,EAAiD,EAAjDA,aAAcC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,iBACtCC,EAAY,GACVC,EAAE,EAAGA,GAAIC,KAAKC,KAAKL,EAAaD,GAAeI,IACnDD,EAAWI,KAAKH,GAGpB,OACI,8BACG,oBAAIV,UAAU,aAAd,SAEQS,EAAWR,KAAI,SAAAa,GAAM,OACjB,oBAAiBd,UAAU,YAA3B,SACI,mBAAGe,QAAW,kBAAMP,EAAiBM,IAASE,KAAK,KAAKhB,UAAU,YAAlE,SACKc,KAFAA,WC4BjBG,MApCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNpB,EADM,KACCqB,EADD,OAEiBD,oBAAS,GAF1B,mBAENnB,EAFM,KAEGqB,EAFH,OAGyBF,mBAAS,GAHlC,mBAGNG,EAHM,KAGOC,EAHP,OAIUJ,mBAAS,IAAzBZ,EAJM,oBAObiB,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,6DACjBJ,GAAW,GADM,SAECK,IAAMC,IAAI,8CAFX,OAEXC,EAFW,OAGjBR,EAASQ,EAAIC,MACbR,GAAW,GAJM,2CAAH,qDAOhBS,KACC,IAGH,IAAMC,EAAmBT,EAAcf,EACjCyB,EAAmBD,EAAmBxB,EACtC0B,EAAelC,EAAMmC,MAAMF,EAAkBD,GAMnD,OACE,sBAAK9B,UAAU,iBAAf,UACE,oBAAIA,UAAU,oBAAd,2BACA,cAAC,EAAD,CAAOF,MAAOkC,EAAcjC,QAASA,IACrC,cAAC,EAAD,CAAYQ,WAAYT,EAAMoC,OAAQ5B,aAAcA,EAAcE,iBAN7C,SAACC,GAAD,OAAgBa,EAAeb,UClB3C0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a57fbfbd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Posts = ({ posts, loading }) => {\r\n\r\n    if (loading) {\r\n        return <h2>Loading.....</h2>\r\n    }\r\n\r\n    return (\r\n        <ul className=\"list-group mb-4\">\r\n            {\r\n                posts.map(post => (\r\n                    <li key={post.id} className=\"list-group-item\">{post.title}</li>\r\n                ))\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Posts\r\n","import React from 'react'\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, handlePagination }) => {\r\n    const pageNumber= [];\r\n    for(let i=1; i<= Math.ceil(totalPosts / postsPerPage); i++){\r\n        pageNumber.push(i)\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n           <ul className=\"pagination\">\r\n               {\r\n                   pageNumber.map(number => (\r\n                       <li key={number} className=\"page-item\">\r\n                           <a onClick = {() => handlePagination(number)} href=\"!#\" className=\"page-link\">\r\n                               {number}\r\n                           </a>\r\n                       </li>\r\n                   ))\r\n               }\r\n            </ul> \r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination\r\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios';\nimport Posts from './components/Posts';\nimport Pagination from './components/Pagination';\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10)\n\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts');\n      setPosts(res.data);\n      setLoading(false);\n    }\n\n    fetchPosts();\n  }, []);\n\n  // Get current posts\n  const indexOfLastPosts = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPosts - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPosts);\n\n\n  // Pagination\n  const handlePagination = (pageNumber) => setCurrentPage(pageNumber);\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-success mb-4\">My Blog Posts</h1>\n      <Posts posts={currentPosts} loading={loading} />\n      <Pagination totalPosts={posts.length} postsPerPage={postsPerPage} handlePagination={handlePagination} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}